{"version":3,"sources":["components/Item/Item.js","components/ItemList/ItemList.js","App.js","serviceWorker.js","index.js"],"names":["completeStyle","width","iconStyle","cursor","zIndex","Item","props","state","isCompleted","handleChange","bind","event","target","name","checked","this","setState","className","style","type","value","item","text","onChange","edit","id","border","display","onClick","delete","Component","ItemList","list","items","map","key","App","itemList","currentItem","handleSubmit","deleteItem","editItem","Date","now","preventDefault","newItem","newList","currentList","includes","alert","updatedList","filter","onSubmit","placeholder","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.17a7c163.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './item.css';\r\nimport { FaTrash} from \"react-icons/fa\";\r\nimport { ImCheckboxUnchecked, ImCheckboxChecked } from 'react-icons/im'\r\nconst completeStyle = {\r\n    width: \"70%\",\r\n}\r\n\r\nconst iconStyle = {\r\n    cursor: \"pointer\",\r\n    zIndex: 1,\r\n}\r\n\r\nclass Item extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            isCompleted: false,\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n    }\r\n\r\n    handleChange(event) {\r\n        const {name, checked} = event.target\r\n        this.setState({\r\n            [name]: checked\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"item-box\" style={this.state.isCompleted? completeStyle: null}>\r\n                <form>\r\n                    <div className=\"text-area\">\r\n                        <input\r\n                            type=\"text\" \r\n                            value={this.props.item.text} \r\n                            style={this.state.isCompleted? completeStyle: null} onChange={(event)=> {\r\n                                this.props.edit(event.target.value, this.props.item.id)\r\n                            }}\r\n                        />                  \r\n                    </div>\r\n                    <div className=\"status-area\" style={this.state.isCompleted? {border: \"none\"}: null}>\r\n                        <div className=\"delete-area\" style={this.state.isCompleted? {display: \"none\"}: null}>\r\n                            <FaTrash \r\n                            onClick={() => this.props.delete(this.props.item.id)} style={{cursor: \"pointer\"}}\r\n                            />\r\n                        </div>\r\n                        <div className=\"complete-area\">\r\n                            {this.state.isCompleted? <ImCheckboxChecked  />: <ImCheckboxUnchecked style={iconStyle} />}\r\n                            <input \r\n                                name=\"isCompleted\" \r\n                                type=\"checkbox\" \r\n                                checked={this.state.isCompleted} \r\n                                onChange={this.handleChange} \r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Item;\r\n","import React from 'react';\r\nimport './ItemList.css';\r\nimport Item from '../Item/Item';\r\n\r\nconst  ItemList = (props) => {\r\n\r\nconst items = props.items;\r\n    const list = items.map(item => {\r\n        return (\r\n            <Item key={item.id} item={item} delete={props.delete} edit={props.edit} />\r\n        ) \r\n    })\r\n    return (\r\n        <div className=\"list-container\">\r\n            {list}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ItemList;\r\n","import React from 'react';\nimport './App.css';\nimport ItemList from './components/ItemList/ItemList';\n\n// App Component\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      itemList: [],\n      currentItem: {\n        text: '',\n        id: ''\n      }\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.deleteItem = this.deleteItem.bind(this)\n    this.editItem = this.editItem.bind(this)\n  }\n\n  handleChange(event) {\n    this.setState({\n      currentItem: {\n        text: event.target.value,\n        id: Date.now()\n      }\n    })\n  }\n\n  handleSubmit(event) {\n\n    event.preventDefault()\n    let newItem = this.state.currentItem\n    let newList = [...this.state.itemList, newItem]\n    let currentList = this.state.itemList\n    \n    if(newItem.text !== '' ) {\n      if(!currentList.includes(newItem)) {\n        this.setState({\n          itemList: newList\n        })\n      } else {\n        alert(\"Task is already on list\")\n      }\n    } else {\n      alert(\"Please enter a new task\")\n    }\n  }\n  editItem(text, key) {\n\n      const items = this.state.itemList\n      items.map((item) => {\n        if(item.id === key) {\n          item.text = text\n        }\n        return items\n      })\n      this.setState(()=> {\n        return {\n          itemList: items\n        }\n      })\n\n  }\n\n  deleteItem(key) {\n\n    const prevList = this.state.itemList\n    const updatedList = prevList.filter(item => item.id !== key )\n    this.setState({\n      itemList: updatedList\n    })\n\n  }\n\n  render() {\n\n    return (\n      <>\n        <section className=\"form-area\">\n          <form onSubmit={this.handleSubmit}>\n            <div className=\"input-area\">\n              <input \n                type=\"text\" \n                placeholder=\"Add task....\"\n                name=\"text\"\n                value={this.state.currentItem.text}\n                onChange={this.handleChange}\n              />\n              <button type=\"submit\">Add</button>\n            </div>\n          </form>\n          <div className=\"list-area\">\n            <ItemList\n              items={this.state.itemList}\n              delete={this.deleteItem} \n              edit={this.editItem}\n            />\n        </div>\n        </section>\n      </>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}